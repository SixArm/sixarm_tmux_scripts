#!/bin/zsh
set -euf -o pipefail
out () { printf %s\\n "$*" ; }

##
# Launch tmux with a sesson and windows suitable for Rails development.
#
# Syntax:
#
#     tmux-rails [session-name]
#
# Example:
#
#     cd myapp
#     tmux-rails
#
#
# ## What this does
#
# The script attaches to session-name.
#
#   * If the session doesn't exist, then this creates it.
#   * The _session-name_ defaults to the basename of the pwd.
#
# The script launches these windows with these commands:
#
#   * 1:ed (editor) = `$EDITOR`
#   * 2:qa (quality assurance) = `rake test`
#   * 3:ll (log listing) = `cd log && tail -f $RAILS_ENV.log`
#   * 4:cc (console) = `rails console`
#   * 5:db (database) = `rails db -p`
#   * 6:ws (webserver) = `rails server`
#   * 7:bg (background misc. work, such as command line tools)
#   * 8:cd (continuous deployment, such as integration and delivery)
#   * 9:op (operations monitoring, such as metrics and analytics) 
#
# ## Commands
#
# This script will choose the "rails" command:
#
#   * If the $RAILS env var is set, then use it.
#   * If "bin/rails" is runnable, then use it.
#   * If "bundle" command is runnable, then use "bundle exec rails".
#
# This script will do the same as above for the "rake" command.
#
#
# ## Tracking
#
# Program: tmux-rails
# Version: 3.1.0
# Created: 2013-08-02
# Updated: 2018-02-25
# License: GPL
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##

# We expect the TMUX environment variable to be unset.
if [ -z ${TMUX+_} ]; then
    # noop
else
    out "TMUX environment variable is alread set, so exit"
    exit 1
fi

# Choose a commmand for rails.
if [ -z ${RAILS+_} ]; then
  if [ -x 'bin/rails' ]; then
    RAILS="bin/rails"
  elif command -v bundle >/dev/null 2>&1; then
    RAILS="bundle exec rails"
  else
    RAILS="rails"
  fi
fi

# Choose a commmand for rake.
if [ -z ${RAKE+_} ]; then
  if [ -x 'bin/rake' ]; then
    RAKE="bin/rake"
  elif command -v bundle >/dev/null 2>&1; then
    RAKE="bundle exec rake"
  else
    RAKE="rake"
  fi
fi

RAILS_ENV=${RAILS_ENV:-development}

# The session name defaults to the current directory's basename.
s=${1-`basename \`pwd\``}


# Set the name the terminal window to the session name.
# This line is optional -- you may comment it out if you prefer.
# You may prefer to set your own title, or may already be using
# something such as zsh auto title, or OSX iTerm2 appearance settings
# to automatically set window & tab titles, or some other approach.
echo -e "\033]1;$s\007"

# Create the new session.
tmux new-session -A -D -d -s "$s"

window(){
  t="$1"; name="$2"; keys="$3"
  [ -z "$name" ] || tmux new-window -d -t "$t" -n "$name"
  [ -z "$keys" ] || tmux send-keys -t "$t" "$keys" C-m
}

window "$s:1" "${TMUX_RAILS_WINDOW_1_NAME:-ed}" "${TMUX_RAILS_WINDOW_1_KEYS:-$EDITOR}"
window "$s:2" "${TMUX_RAILS_WINDOW_2_NAME:-qa}" "${TMUX_RAILS_WINDOW_2_KEYS:-$RAKE spec}"
window "$s:3" "${TMUX_RAILS_WINDOW_3_NAME:-ll}" "${TMUX_RAILS_WINDOW_3_KEYS:-cd log && tail -f $RAILS_ENV.log}"
window "$s:4" "${TMUX_RAILS_WINDOW_4_NAME:-cc}" "${TMUX_RAILS_WINDOW_4_KEYS:-$RAILS console}"
window "$s:5" "${TMUX_RAILS_WINDOW_5_NAME:-db}" "${TMUX_RAILS_WINDOW_5_KEYS:-$RAILS db}"
window "$s:6" "${TMUX_RAILS_WINDOW_6_NAME:-ws}" "${TMUX_RAILS_WINDOW_6_KEYS:-$RAILS server}"
window "$s:7" "${TMUX_RAILS_WINDOW_7_NAME:-bg}" "${TMUX_RAILS_WINDOW_7_KEYS:-}"
window "$s:8" "${TMUX_RAILS_WINDOW_8_NAME:-cd}" "${TMUX_RAILS_WINDOW_8_KEYS:-}"
window "$s:9" "${TMUX_RAILS_WINDOW_9_NAME:-op}" "${TMUX_RAILS_WINDOW_9_KEYS:-}"

# Last steps.
tmux kill-window -t 0
tmux select-window -t "$s:2"
tmux select-window -t "$s:1"
tmux -2 attach-session -d

