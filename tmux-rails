#!/bin/zsh
set -euf -o pipefail
out () { printf %s\\n "$*" ; }

##
# Launch tmux with a sesson and windows suitable for Rails development.
#
# Syntax:
#
#     tmux-rails [session-name]
#
# Example:
#
#     cd myapp
#     tmux-rails
#
#
# ## What this does
#
# The script attaches to session-name.
#
#   * If the session doesn't exist, then this creates it.
#   * The _session-name_ defaults to the basename of the pwd.
#
# The script launches these windows with these commands:
#
#   * 1:ed (editor) = `$EDITOR`
#   * 2:qa (quality assurance) = `rake test`
#   * 3:ll (log listing) = `cd log && tail -f $RAILS_ENV.log`
#   * 4:cc (console) = `rails console`
#   * 5:db (database) = `rails db -p`
#   * 6:ws (webserver) = `rails server`
#   * 7:bg (background)
#   * 8:cd (continuous deployment)
#   * 9:op (operations & processes, such as devops, metrics, analytics) 
#
# ## Commands
#
# This script will choose the "rails" command:
#
#   * If the $RAILS env var is set, then use it.
#   * If "bin/rails" is runnable, then use it.
#   * If "bundle" command is runnable, then use "bundle exec rails".
#
# This script will do the same as above for the "rake" command.
#
#
# ## Tracking
#
# Program: tmux-rails
# Version: 3.1.0
# Created: 2013-08-02
# Updated: 2018-02-25
# License: GPL
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##

# We expect the TMUX environment variable to be unset.
if [ -z ${TMUX+_} ]; then
    # noop
else
    out "TMUX environment variable is alread set, so exit"
    exit 1
fi

# Choose a commmand for rails.
if [ -z ${RAILS+_} ]; then
  if [ -x 'bin/rails' ]; then
    RAILS="bin/rails"
  elif command -v bundle >/dev/null 2>&1; then
    RAILS="bundle exec rails"
  else
    RAILS="rails"
  fi
fi

# Choose a commmand for rake.
if [ -z ${RAKE+_} ]; then
  if [ -x 'bin/rake' ]; then
    RAKE="bin/rake"
  elif command -v bundle >/dev/null 2>&1; then
    RAKE="bundle exec rake"
  else
    RAKE="rake"
  fi
fi

RAILS_ENV=${RAILS_ENV:-development}

# The session name defaults to the current directory's basename.
s=${1-`basename \`pwd\``}


# Set the name the terminal window to the session name.
# This line is optional -- you may comment it out if you prefer.
# You may prefer to set your own title, or may already be using
# something such as zsh auto title, or OSX iTerm2 appearance settings
# to automatically set window & tab titles, or some other approach.
echo -e "\033]1;$s\007"

# Create the new session.
tmux new-session -A -D -d -s "$s"

# Create the windows.
tmux new-window -d -t "$s:1" -n "ed"
tmux new-window -d -t "$s:2" -n "qa"
tmux new-window -d -t "$s:3" -n "ll"
tmux new-window -d -t "$s:4" -n "cc"
tmux new-window -d -t "$s:5" -n "db"
tmux new-window -d -t "$s:6" -n "ws"
tmux new-window -d -t "$s:7" -n "bg"
tmux new-window -d -t "$s:8" -n "cd"
tmux new-window -d -t "$s:9" -n "op"
tmux kill-window -t 0

# Send keys.
tmux send-keys -t "ed" "$EDITOR" C-m
tmux send-keys -t "qa" "$RAKE spec" C-m
tmux send-keys -t "ll" "cd log && tail -f $RAILS_ENV.log" C-m
tmux send-keys -t "cc" "$RAILS console" C-m
tmux send-keys -t "db" "$RAILS db" C-m
tmux send-keys -t "ws" "$RAILS server" C-m

# Last step: attach to the session
tmux select-window -t "$s:2"
tmux select-window -t "$s:1"
tmux -2 attach-session -d

